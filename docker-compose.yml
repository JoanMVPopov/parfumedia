# & symbol is used to define an anchor, which allows you to reuse a block of configuration
# across multiple sections. This is useful when you have shared configurations
# across different services, as it avoids repeating the same settings
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.1}
  build:
    context: ./airflow
    dockerfile: Dockerfile
  env_file:
    - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  # Database Service: PostgreSQL
  postgres:
    image: postgres:13
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - app-network

  # Cache & Broker Service: Redis
  redis:
    image: redis:6-alpine
    restart: always
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    networks:
      - app-network

  # Backend Service: Django with Gunicorn
  backend:
    build:
      context: ./backend
      dockerfile: backend.Dockerfile
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    env_file:
      - .env
    volumes:
      - ./backend:/app/backend
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # Frontend Service: Vue.js
  frontend:
    build:
      context: ./frontend
      dockerfile: production.Dockerfile
      args:
        VUE_APP_API_URL: ${VUE_APP_API_URL}
    restart: always
    env_file:
      - .env
#    volumes:
#      - ./frontend:/app/frontend
#    ports:
#      - "3000:8080"
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network


  airflow-webserver:
    <<: *airflow-common
    image: "apache/airflow:2.10.1"
    command: webserver
#    deploy:
#      resources:
#        limits:
#          memory: 1G
#          cpus: "1"
    ports:
      - "8081:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8081/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-network

  airflow-scheduler:
    <<: *airflow-common
    image: "apache/airflow:2.10.1"
    command: scheduler
#    deploy:
#      resources:
#        limits:
#          memory: 512M
#          cpus: "1"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-network

  airflow-worker:
    <<: *airflow-common
    command: celery worker
#    deploy:
#      resources:
#        limits:
#          memory: 3G
#          cpus: "1"
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-network

  airflow-triggerer:
    <<: *airflow-common
    image: "apache/airflow:2.10.1"
    command: triggerer
#    deploy:
#      resources:
#        limits:
#          memory: 512M
#          cpus: "1"
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-network

  airflow-init:
    <<: *airflow-common
    image: "apache/airflow:2.10.1"
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        airflow db migrate &&
        airflow users create \
          --username "$${AIRFLOW_ADMIN_USER}" \
          --firstname "$${AIRFLOW_ADMIN_FIRSTNAME}" \
          --lastname "$${AIRFLOW_ADMIN_LASTNAME}" \
          --role Admin \
          --email "$${AIRFLOW_ADMIN_EMAIL}" \
          --password "$${AIRFLOW_ADMIN_PASSWORD}"
        echo "Init finished, no problems detected"
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
#      _AIRFLOW_DB_MIGRATE: 'true'
#      _AIRFLOW_WWW_USER_CREATE: 'true'
#      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
#      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
#      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "${AIRFLOW_UID:-50000}:0"
    networks:
      - app-network

#  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
#  # or by explicitly targeted on the command line e.g. docker-compose up flower.
#  # See: https://docs.docker.com/compose/profiles/
#  flower:
#    <<: *airflow-common
#    command: celery flower
#    profiles:
#      - flower
#    ports:
#      - "5555:5555"
#    healthcheck:
#      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#    networks:
#      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
